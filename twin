#!/bin/bash

# twin - Simple rsync wrapper for syncing directories to remote hosts
# Usage: twin [options] ssh-remote-name [directory]
# Options:
#   -p    Pull back changes after push
#   -e    Custom rsync flags (default: '-avu --progress')
#   -h    Show help

set -e

# Default values
RSYNC_FLAGS="-avu --progress"
PULL_BACK=false
SSH_REMOTE=""
DIRECTORY=""
REMOTE_PATH=""
CONFIG_DIR="$(dirname "$0")"

# Function to display help
show_help() {
    cat << EOF
twin - Simple rsync wrapper for syncing directories to remote hosts

Usage: twin [options] ssh-remote-name [remote-path]

Options:
  -p          Pull back changes after push (bidirectional sync)
  -e FLAGS    Custom rsync flags (default: '-avu --progress')
  -h          Show this help message

Examples:
  twin myserver                    # Sync to saved path or same path on remote
  twin myserver /remote/path       # Set up pairing to specific remote path
  twin -p myserver                 # Push then pull back changes
  twin -e "-av --delete" myserver  # Use custom rsync flags (saved for future use)

EOF
    exit 0
}

# Parse command line options
while getopts "pe:h" opt; do
    case $opt in
        p)
            PULL_BACK=true
            ;;
        e)
            RSYNC_FLAGS="$OPTARG"
            RSYNC_FLAGS_SET=true
            ;;
        h)
            show_help
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            echo "Use -h for help" >&2
            exit 1
            ;;
    esac
done

# Shift past the options
shift $((OPTIND-1))

# Check for required ssh-remote-name argument
if [ $# -eq 0 ]; then
    echo "Error: ssh-remote-name is required" >&2
    echo "Use -h for help" >&2
    exit 1
fi

SSH_REMOTE="$1"
shift

# Get current directory
DIRECTORY="$(pwd)"

# Get remote path (optional)
if [ $# -gt 0 ]; then
    REMOTE_PATH="$1"
    # Save the remote path to config
    "$CONFIG_DIR/twin-config" write "$SSH_REMOTE" --remote-path "$REMOTE_PATH" --rsync-flags "$RSYNC_FLAGS"
else
    # Try to read from config
    SAVED_REMOTE_PATH=$("$CONFIG_DIR/twin-config" read "$SSH_REMOTE" --field remote_path 2>/dev/null || echo "")
    SAVED_RSYNC_FLAGS=$("$CONFIG_DIR/twin-config" read "$SSH_REMOTE" --field rsync_flags 2>/dev/null || echo "")
    
    if [ -n "$SAVED_REMOTE_PATH" ]; then
        REMOTE_PATH="$SAVED_REMOTE_PATH"
        echo "Using saved remote path: $REMOTE_PATH"
    else
        # Default to same path as local
        REMOTE_PATH="$DIRECTORY"
    fi
    
    # Use saved rsync flags if no -e option was provided
    if [ -z "$RSYNC_FLAGS_SET" ] && [ -n "$SAVED_RSYNC_FLAGS" ]; then
        RSYNC_FLAGS="$SAVED_RSYNC_FLAGS"
        echo "Using saved rsync flags: $RSYNC_FLAGS"
    fi
fi

# Ensure directory ends with /
if [[ ! "$DIRECTORY" =~ /$ ]]; then
    DIRECTORY="${DIRECTORY}/"
fi

# Test SSH connection
echo "Testing SSH connection to $SSH_REMOTE..."
if ! ssh -o ConnectTimeout=5 "$SSH_REMOTE" exit 2>/dev/null; then
    echo "Error: Cannot connect to SSH remote '$SSH_REMOTE'" >&2
    echo "Make sure the remote is configured in your ~/.ssh/config" >&2
    exit 1
fi

# Create remote directory if it doesn't exist
# Remove trailing slash for directory creation
REMOTE_DIR="${REMOTE_PATH%/}"
echo "Ensuring remote directory exists: $REMOTE_DIR"
if ! ssh "$SSH_REMOTE" "mkdir -p '$REMOTE_DIR'"; then
    echo "Error: Failed to create remote directory '$REMOTE_DIR'" >&2
    exit 1
fi

# Update config with latest sync info
"$CONFIG_DIR/twin-config" write "$SSH_REMOTE" --rsync-flags "$RSYNC_FLAGS" >/dev/null 2>&1

# Perform the sync (push)
echo "Syncing $DIRECTORY to $SSH_REMOTE:$REMOTE_PATH"
echo "Using rsync flags: $RSYNC_FLAGS"
# Build rsync command properly
RSYNC_CMD="rsync $RSYNC_FLAGS \"$DIRECTORY/\" \"$SSH_REMOTE:$REMOTE_PATH/\""
if ! eval "$RSYNC_CMD"; then
    echo "Error: rsync push failed" >&2
    exit 1
fi

# Pull back if requested
if [ "$PULL_BACK" = true ]; then
    echo ""
    echo "Pulling back changes from $SSH_REMOTE:$REMOTE_PATH"
    # Build rsync command properly
    RSYNC_CMD="rsync $RSYNC_FLAGS \"$SSH_REMOTE:$REMOTE_PATH/\" \"$DIRECTORY/\""
    if ! eval "$RSYNC_CMD"; then
        echo "Error: rsync pull failed" >&2
        exit 1
    fi
fi

echo ""
echo "Sync completed successfully!"